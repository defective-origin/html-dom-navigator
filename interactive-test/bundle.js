(()=>{"use strict";var e={569:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var a=i(r(996)),u=function(){function e(e){this.nodeMapByUuid={},this.nodeMapByLabel={},this.activeNode=null,this.elem=e,this.rootNode=new a.default(e),this.build(e,this.rootNode),this.activateNode(this.rootNode)}return e.prototype.build=function(e,t){for(var r=0;r<e.children.length;r+=1){var n=e.children[r];if(a.default.hasNavTypeAttribute(n)){var o=new a.default(n,t);this.registerNode(o),o.type!==a.NavItemTypes.Item&&this.build(n,o)}else this.build(n,t)}},e.prototype.registerNode=function(e){this.nodeMapByUuid[e.uuid]=e,e.label&&(this.nodeMapByLabel[e.label]=e)},e.prototype.rebuild=function(){var e,t=null===(e=this.activeNode)||void 0===e?void 0:e.uuid;this.nodeMapByUuid={},this.rootNode=new a.default(this.elem),this.build(this.elem,this.rootNode),this.activateNodeByUuid(t)},e.prototype.activateNodeByLabel=function(e){var t=this.nodeMapByLabel[e];this.activateNode(t)},e.prototype.activateNodeByUuid=function(e){var t=this.nodeMapByUuid[e];this.activateNode(t)},e.prototype.activateNode=function(e){var t,r,n;if(e&&e.uuid!==(null===(t=this.activeNode)||void 0===t?void 0:t.uuid))if(e.hasType(a.NavItemTypes.Item))null===(r=this.activeNode)||void 0===r||r.deactivate(),this.activeNode=e,null===(n=this.activeNode)||void 0===n||n.activate();else{var o=e.getFirstChildNode();this.activateNode(o)}},e.prototype.deactivateNode=function(){var e;null===(e=this.activeNode)||void 0===e||e.deactivate(),this.activeNode=null},e.prototype.move=function(e,t,r){if(e&&e.parent){var n=e.parent,o=n.getChildNode(e.index+r);n.hasType(t)&&o?this.activateNode(o):this.move(n,t,r)}},e.prototype.up=function(){this.move(this.activeNode,a.NavItemTypes.Row,a.Offset.Prev)},e.prototype.down=function(){this.move(this.activeNode,a.NavItemTypes.Row,a.Offset.Next)},e.prototype.left=function(){this.move(this.activeNode,a.NavItemTypes.Column,a.Offset.Prev)},e.prototype.right=function(){this.move(this.activeNode,a.NavItemTypes.Column,a.Offset.Next)},e}();t.default=u},996:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Offset=t.NavItemDataAttrs=t.NavItemTypes=void 0;var n,o,i,a=r(614);!function(e){e.Row="row",e.Column="column",e.Item="item"}(n=t.NavItemTypes||(t.NavItemTypes={})),function(e){e.NavType="nav",e.NavLabel="navLabel",e.NavUuid="navUuid",e.ActiveNavItem="activeNavItem"}(o=t.NavItemDataAttrs||(t.NavItemDataAttrs={})),(i=t.Offset||(t.Offset={}))[i.Next=1]="Next",i[i.Prev=-1]="Prev";var u=function(){function e(e,t,r){void 0===t&&(t=null),void 0===r&&(r=0),this.elem=e,this.parent=t,this.index=r,this.children=[],t&&(this.index=t.children.length,t.children.push(this)),this.hasType(n.Item)&&(this.elem.tabIndex=-1),this.elem.dataset[o.NavUuid]=a.v4()}return Object.defineProperty(e.prototype,"type",{get:function(){return this.elem.dataset[o.NavType]||null},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"uuid",{get:function(){return this.elem.dataset[o.NavUuid]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.elem.dataset[o.NavLabel]||null},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isActive",{get:function(){return Boolean(this.elem.dataset[o.ActiveNavItem])},enumerable:!1,configurable:!0}),e.prototype.hasType=function(e){return this.type===e},e.prototype.getChildNode=function(e){return this.children[e]||null},e.prototype.getFirstChildNode=function(){return this.getChildNode(0)},e.hasNavTypeAttribute=function(e){return Boolean(e.dataset[o.NavType])},e.prototype.activate=function(){this.isActive||this.type!==n.Item||(this.elem.dataset[o.ActiveNavItem]="true",this.elem.focus(),this.elem.scrollIntoView({block:"center",inline:"center",behavior:"smooth"}))},e.prototype.deactivate=function(){this.isActive&&(this.elem.blur(),delete this.elem.dataset[o.ActiveNavItem])},e}();t.default=u},124:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(569)),i=n(r(105)),a=n(r(522)),u=n(r(876)),s=function(){function e(){this.navTree=null,this.navTreeHtmlObserver=new i.default,this.navTreeClickObserver=new a.default,this.navTreeKeyPressObserver=new u.default}return e.prototype.observe=function(e){e.isEqualNode(this.navTree&&this.navTree.elem)||(this.navTree=new o.default(e),this.navTreeHtmlObserver.watch(this.navTree),this.navTreeClickObserver.watch(this.navTree),this.navTreeKeyPressObserver.watch(this.navTree))},e.prototype.activateNavItemByLabel=function(e){var t;null===(t=this.navTree)||void 0===t||t.activateNodeByLabel(e)},e.prototype.activateNavItemByUuid=function(e){var t;null===(t=this.navTree)||void 0===t||t.activateNodeByUuid(e)},e.prototype.deactivateNavItem=function(){var e;null===(e=this.navTree)||void 0===e||e.deactivateNode()},e}();t.default=s},607:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(124));"undefined"!=typeof window&&(window.HtmlDomNavigator=new o.default)},522:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(996);t.default=function(){var e=this;this.observable=null,this.watch=function(t){e.unwatch(),e.observable=t,window.onclick=e.onClickEventDetected},this.onClickEventDetected=function(t){var r,o=t.target.closest('[data-nav="'+n.NavItemTypes.Item+'"]');o&&(null===(r=e.observable)||void 0===r||r.activateNodeByUuid(o.dataset[n.NavItemDataAttrs.NavUuid]))},this.unwatch=function(){window.onclick=null,e.observable=null}}},105:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=this;this.observer=null,this.observable=null,this.observerConfig={attributes:!0,childList:!0,subtree:!0,attributeFilter:["data-nav"]},this.watch=function(t){e.unwatch(),e.observable=t,e.observer=new MutationObserver(e.onHtmlChangeDetected),e.observer.observe(e.observable.elem,e.observerConfig)},this.onHtmlChangeDetected=function(){var t;null===(t=e.observable)||void 0===t||t.rebuild()},this.unwatch=function(){var t;null===(t=e.observer)||void 0===t||t.disconnect(),e.observer=null,e.observable=null}}},876:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=this;this.observable=null,this.controls={ArrowUp:function(){var t;return null===(t=e.observable)||void 0===t?void 0:t.up()},ArrowDown:function(){var t;return null===(t=e.observable)||void 0===t?void 0:t.down()},ArrowLeft:function(){var t;return null===(t=e.observable)||void 0===t?void 0:t.left()},ArrowRight:function(){var t;return null===(t=e.observable)||void 0===t?void 0:t.right()}},this.watch=function(t){e.unwatch(),e.observable=t,window.onkeydown=e.onKeyEventDetected},this.onKeyEventDetected=function(t){var r=e.controls[t.key];r&&r()},this.unwatch=function(){window.onkeydown=null,e.observable=null}}},614:(e,t,r)=>{r.r(t),r.d(t,{NIL:()=>P,parse:()=>y,stringify:()=>v,v1:()=>p,v3:()=>A,v4:()=>U,v5:()=>M,validate:()=>u,version:()=>j});var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),o=new Uint8Array(16);function i(){if(!n)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,u=function(e){return"string"==typeof e&&a.test(e)};for(var s=[],l=0;l<256;++l)s.push((l+256).toString(16).substr(1));const v=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(s[e[t+0]]+s[e[t+1]]+s[e[t+2]]+s[e[t+3]]+"-"+s[e[t+4]]+s[e[t+5]]+"-"+s[e[t+6]]+s[e[t+7]]+"-"+s[e[t+8]]+s[e[t+9]]+"-"+s[e[t+10]]+s[e[t+11]]+s[e[t+12]]+s[e[t+13]]+s[e[t+14]]+s[e[t+15]]).toLowerCase();if(!u(r))throw TypeError("Stringified UUID is invalid");return r};var c,d,f=0,h=0;const p=function(e,t,r){var n=t&&r||0,o=t||new Array(16),a=(e=e||{}).node||c,u=void 0!==e.clockseq?e.clockseq:d;if(null==a||null==u){var s=e.random||(e.rng||i)();null==a&&(a=c=[1|s[0],s[1],s[2],s[3],s[4],s[5]]),null==u&&(u=d=16383&(s[6]<<8|s[7]))}var l=void 0!==e.msecs?e.msecs:Date.now(),p=void 0!==e.nsecs?e.nsecs:h+1,y=l-f+(p-h)/1e4;if(y<0&&void 0===e.clockseq&&(u=u+1&16383),(y<0||l>f)&&void 0===e.nsecs&&(p=0),p>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");f=l,h=p,d=u;var b=(1e4*(268435455&(l+=122192928e5))+p)%4294967296;o[n++]=b>>>24&255,o[n++]=b>>>16&255,o[n++]=b>>>8&255,o[n++]=255&b;var m=l/4294967296*1e4&268435455;o[n++]=m>>>8&255,o[n++]=255&m,o[n++]=m>>>24&15|16,o[n++]=m>>>16&255,o[n++]=u>>>8|128,o[n++]=255&u;for(var N=0;N<6;++N)o[n+N]=a[N];return t||v(o)},y=function(e){if(!u(e))throw TypeError("Invalid UUID");var t,r=new Uint8Array(16);return r[0]=(t=parseInt(e.slice(0,8),16))>>>24,r[1]=t>>>16&255,r[2]=t>>>8&255,r[3]=255&t,r[4]=(t=parseInt(e.slice(9,13),16))>>>8,r[5]=255&t,r[6]=(t=parseInt(e.slice(14,18),16))>>>8,r[7]=255&t,r[8]=(t=parseInt(e.slice(19,23),16))>>>8,r[9]=255&t,r[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,r[11]=t/4294967296&255,r[12]=t>>>24&255,r[13]=t>>>16&255,r[14]=t>>>8&255,r[15]=255&t,r};function b(e,t,r){function n(e,n,o,i){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],r=0;r<e.length;++r)t.push(e.charCodeAt(r));return t}(e)),"string"==typeof n&&(n=y(n)),16!==n.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var a=new Uint8Array(16+e.length);if(a.set(n),a.set(e,n.length),(a=r(a))[6]=15&a[6]|t,a[8]=63&a[8]|128,o){i=i||0;for(var u=0;u<16;++u)o[i+u]=a[u];return o}return v(a)}try{n.name=e}catch(e){}return n.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",n.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",n}function m(e){return 14+(e+64>>>9<<4)+1}function N(e,t){var r=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(r>>16)<<16|65535&r}function w(e,t,r,n,o,i){return N((a=N(N(t,e),N(n,i)))<<(u=o)|a>>>32-u,r);var a,u}function g(e,t,r,n,o,i,a){return w(t&r|~t&n,e,t,o,i,a)}function I(e,t,r,n,o,i,a){return w(t&n|r&~n,e,t,o,i,a)}function T(e,t,r,n,o,i,a){return w(t^r^n,e,t,o,i,a)}function O(e,t,r,n,o,i,a){return w(r^(t|~n),e,t,o,i,a)}const A=b("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(var r=0;r<t.length;++r)e[r]=t.charCodeAt(r)}return function(e){for(var t=[],r=32*e.length,n="0123456789abcdef",o=0;o<r;o+=8){var i=e[o>>5]>>>o%32&255,a=parseInt(n.charAt(i>>>4&15)+n.charAt(15&i),16);t.push(a)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[m(t)-1]=t;for(var r=1732584193,n=-271733879,o=-1732584194,i=271733878,a=0;a<e.length;a+=16){var u=r,s=n,l=o,v=i;r=g(r,n,o,i,e[a],7,-680876936),i=g(i,r,n,o,e[a+1],12,-389564586),o=g(o,i,r,n,e[a+2],17,606105819),n=g(n,o,i,r,e[a+3],22,-1044525330),r=g(r,n,o,i,e[a+4],7,-176418897),i=g(i,r,n,o,e[a+5],12,1200080426),o=g(o,i,r,n,e[a+6],17,-1473231341),n=g(n,o,i,r,e[a+7],22,-45705983),r=g(r,n,o,i,e[a+8],7,1770035416),i=g(i,r,n,o,e[a+9],12,-1958414417),o=g(o,i,r,n,e[a+10],17,-42063),n=g(n,o,i,r,e[a+11],22,-1990404162),r=g(r,n,o,i,e[a+12],7,1804603682),i=g(i,r,n,o,e[a+13],12,-40341101),o=g(o,i,r,n,e[a+14],17,-1502002290),r=I(r,n=g(n,o,i,r,e[a+15],22,1236535329),o,i,e[a+1],5,-165796510),i=I(i,r,n,o,e[a+6],9,-1069501632),o=I(o,i,r,n,e[a+11],14,643717713),n=I(n,o,i,r,e[a],20,-373897302),r=I(r,n,o,i,e[a+5],5,-701558691),i=I(i,r,n,o,e[a+10],9,38016083),o=I(o,i,r,n,e[a+15],14,-660478335),n=I(n,o,i,r,e[a+4],20,-405537848),r=I(r,n,o,i,e[a+9],5,568446438),i=I(i,r,n,o,e[a+14],9,-1019803690),o=I(o,i,r,n,e[a+3],14,-187363961),n=I(n,o,i,r,e[a+8],20,1163531501),r=I(r,n,o,i,e[a+13],5,-1444681467),i=I(i,r,n,o,e[a+2],9,-51403784),o=I(o,i,r,n,e[a+7],14,1735328473),r=T(r,n=I(n,o,i,r,e[a+12],20,-1926607734),o,i,e[a+5],4,-378558),i=T(i,r,n,o,e[a+8],11,-2022574463),o=T(o,i,r,n,e[a+11],16,1839030562),n=T(n,o,i,r,e[a+14],23,-35309556),r=T(r,n,o,i,e[a+1],4,-1530992060),i=T(i,r,n,o,e[a+4],11,1272893353),o=T(o,i,r,n,e[a+7],16,-155497632),n=T(n,o,i,r,e[a+10],23,-1094730640),r=T(r,n,o,i,e[a+13],4,681279174),i=T(i,r,n,o,e[a],11,-358537222),o=T(o,i,r,n,e[a+3],16,-722521979),n=T(n,o,i,r,e[a+6],23,76029189),r=T(r,n,o,i,e[a+9],4,-640364487),i=T(i,r,n,o,e[a+12],11,-421815835),o=T(o,i,r,n,e[a+15],16,530742520),r=O(r,n=T(n,o,i,r,e[a+2],23,-995338651),o,i,e[a],6,-198630844),i=O(i,r,n,o,e[a+7],10,1126891415),o=O(o,i,r,n,e[a+14],15,-1416354905),n=O(n,o,i,r,e[a+5],21,-57434055),r=O(r,n,o,i,e[a+12],6,1700485571),i=O(i,r,n,o,e[a+3],10,-1894986606),o=O(o,i,r,n,e[a+10],15,-1051523),n=O(n,o,i,r,e[a+1],21,-2054922799),r=O(r,n,o,i,e[a+8],6,1873313359),i=O(i,r,n,o,e[a+15],10,-30611744),o=O(o,i,r,n,e[a+6],15,-1560198380),n=O(n,o,i,r,e[a+13],21,1309151649),r=O(r,n,o,i,e[a+4],6,-145523070),i=O(i,r,n,o,e[a+11],10,-1120210379),o=O(o,i,r,n,e[a+2],15,718787259),n=O(n,o,i,r,e[a+9],21,-343485551),r=N(r,u),n=N(n,s),o=N(o,l),i=N(i,v)}return[r,n,o,i]}(function(e){if(0===e.length)return[];for(var t=8*e.length,r=new Uint32Array(m(t)),n=0;n<t;n+=8)r[n>>5]|=(255&e[n/8])<<n%32;return r}(e),8*e.length))})),U=function(e,t,r){var n=(e=e||{}).random||(e.rng||i)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){r=r||0;for(var o=0;o<16;++o)t[r+o]=n[o];return t}return v(n)};function _(e,t,r,n){switch(e){case 0:return t&r^~t&n;case 1:return t^r^n;case 2:return t&r^t&n^r&n;case 3:return t^r^n}}function C(e,t){return e<<t|e>>>32-t}const M=b("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var n=unescape(encodeURIComponent(e));e=[];for(var o=0;o<n.length;++o)e.push(n.charCodeAt(o))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var i=e.length/4+2,a=Math.ceil(i/16),u=new Array(a),s=0;s<a;++s){for(var l=new Uint32Array(16),v=0;v<16;++v)l[v]=e[64*s+4*v]<<24|e[64*s+4*v+1]<<16|e[64*s+4*v+2]<<8|e[64*s+4*v+3];u[s]=l}u[a-1][14]=8*(e.length-1)/Math.pow(2,32),u[a-1][14]=Math.floor(u[a-1][14]),u[a-1][15]=8*(e.length-1)&4294967295;for(var c=0;c<a;++c){for(var d=new Uint32Array(80),f=0;f<16;++f)d[f]=u[c][f];for(var h=16;h<80;++h)d[h]=C(d[h-3]^d[h-8]^d[h-14]^d[h-16],1);for(var p=r[0],y=r[1],b=r[2],m=r[3],N=r[4],w=0;w<80;++w){var g=Math.floor(w/20),I=C(p,5)+_(g,y,b,m)+N+t[g]+d[w]>>>0;N=m,m=b,b=C(y,30)>>>0,y=p,p=I}r[0]=r[0]+p>>>0,r[1]=r[1]+y>>>0,r[2]=r[2]+b>>>0,r[3]=r[3]+m>>>0,r[4]=r[4]+N>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]})),P="00000000-0000-0000-0000-000000000000",j=function(e){if(!u(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}}},t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odG1sLWRvbS1uYXZpZ2F0b3IvLi9zcmMvTmF2VHJlZS50cyIsIndlYnBhY2s6Ly9odG1sLWRvbS1uYXZpZ2F0b3IvLi9zcmMvTmF2VHJlZU5vZGUudHMiLCJ3ZWJwYWNrOi8vaHRtbC1kb20tbmF2aWdhdG9yLy4vc3JjL05hdmlnYXRvci50cyIsIndlYnBhY2s6Ly9odG1sLWRvbS1uYXZpZ2F0b3IvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vaHRtbC1kb20tbmF2aWdhdG9yLy4vc3JjL29ic2VydmVycy9OYXZUcmVlQ2xpY2tPYnNlcnZlci50cyIsIndlYnBhY2s6Ly9odG1sLWRvbS1uYXZpZ2F0b3IvLi9zcmMvb2JzZXJ2ZXJzL05hdlRyZWVIdG1sT2JzZXJ2ZXIudHMiLCJ3ZWJwYWNrOi8vaHRtbC1kb20tbmF2aWdhdG9yLy4vc3JjL29ic2VydmVycy9OYXZUcmVlS2V5UHJlc3NPYnNlcnZlci50cyIsIndlYnBhY2s6Ly9odG1sLWRvbS1uYXZpZ2F0b3IvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcyIsIndlYnBhY2s6Ly9odG1sLWRvbS1uYXZpZ2F0b3IvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JlZ2V4LmpzIiwid2VicGFjazovL2h0bWwtZG9tLW5hdmlnYXRvci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vaHRtbC1kb20tbmF2aWdhdG9yLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vaHRtbC1kb20tbmF2aWdhdG9yLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92MS5qcyIsIndlYnBhY2s6Ly9odG1sLWRvbS1uYXZpZ2F0b3IvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3BhcnNlLmpzIiwid2VicGFjazovL2h0bWwtZG9tLW5hdmlnYXRvci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjM1LmpzIiwid2VicGFjazovL2h0bWwtZG9tLW5hdmlnYXRvci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbWQ1LmpzIiwid2VicGFjazovL2h0bWwtZG9tLW5hdmlnYXRvci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjMuanMiLCJ3ZWJwYWNrOi8vaHRtbC1kb20tbmF2aWdhdG9yLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NC5qcyIsIndlYnBhY2s6Ly9odG1sLWRvbS1uYXZpZ2F0b3IvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3NoYTEuanMiLCJ3ZWJwYWNrOi8vaHRtbC1kb20tbmF2aWdhdG9yLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NS5qcyIsIndlYnBhY2s6Ly9odG1sLWRvbS1uYXZpZ2F0b3IvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL25pbC5qcyIsIndlYnBhY2s6Ly9odG1sLWRvbS1uYXZpZ2F0b3IvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vaHRtbC1kb20tbmF2aWdhdG9yL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2h0bWwtZG9tLW5hdmlnYXRvci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vaHRtbC1kb20tbmF2aWdhdG9yL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vaHRtbC1kb20tbmF2aWdhdG9yL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vaHRtbC1kb20tbmF2aWdhdG9yL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJlbGVtIiwibm9kZU1hcEJ5VXVpZCIsIm5vZGVNYXBCeUxhYmVsIiwiYWN0aXZlTm9kZSIsInRoaXMiLCJyb290Tm9kZSIsImJ1aWxkIiwiYWN0aXZhdGVOb2RlIiwicGFyZW50IiwiaW5kZXgiLCJjaGlsZHJlbiIsImxlbmd0aCIsImNoaWxkRWxlbSIsImhhc05hdlR5cGVBdHRyaWJ1dGUiLCJjaGlsZE5vZGUiLCJyZWdpc3Rlck5vZGUiLCJ0eXBlIiwiTmF2SXRlbVR5cGVzIiwiSXRlbSIsIm5vZGUiLCJ1dWlkIiwibGFiZWwiLCJyZWJ1aWxkIiwicHJldkFjdGl2ZU5hdkl0ZW1VdWlkIiwiYWN0aXZhdGVOb2RlQnlVdWlkIiwiYWN0aXZhdGVOb2RlQnlMYWJlbCIsImtleSIsImhhc1R5cGUiLCJkZWFjdGl2YXRlIiwiYWN0aXZhdGUiLCJnZXRGaXJzdENoaWxkTm9kZSIsImRlYWN0aXZhdGVOb2RlIiwibW92ZSIsIm9mZnNldCIsInBhcmVudE5vZGUiLCJuZXh0Tm9kZSIsImdldENoaWxkTm9kZSIsInVwIiwiUm93IiwiT2Zmc2V0IiwiUHJldiIsImRvd24iLCJOZXh0IiwibGVmdCIsIkNvbHVtbiIsInJpZ2h0IiwiTmF2SXRlbURhdGFBdHRycyIsInB1c2giLCJ0YWJJbmRleCIsImRhdGFzZXQiLCJOYXZVdWlkIiwiTmF2VHlwZSIsIk5hdkxhYmVsIiwiQm9vbGVhbiIsIkFjdGl2ZU5hdkl0ZW0iLCJpc0FjdGl2ZSIsImZvY3VzIiwic2Nyb2xsSW50b1ZpZXciLCJibG9jayIsImlubGluZSIsImJlaGF2aW9yIiwiYmx1ciIsIm5hdlRyZWUiLCJuYXZUcmVlSHRtbE9ic2VydmVyIiwibmF2VHJlZUNsaWNrT2JzZXJ2ZXIiLCJuYXZUcmVlS2V5UHJlc3NPYnNlcnZlciIsIm9ic2VydmUiLCJpc0VxdWFsTm9kZSIsIndhdGNoIiwiYWN0aXZhdGVOYXZJdGVtQnlMYWJlbCIsImFjdGl2YXRlTmF2SXRlbUJ5VXVpZCIsImRlYWN0aXZhdGVOYXZJdGVtIiwid2luZG93IiwiSHRtbERvbU5hdmlnYXRvciIsIm9ic2VydmFibGUiLCJ1bndhdGNoIiwib25jbGljayIsIm9uQ2xpY2tFdmVudERldGVjdGVkIiwiZXZlbnQiLCJ0YXJnZXQiLCJjbG9zZXN0Iiwib2JzZXJ2ZXIiLCJvYnNlcnZlckNvbmZpZyIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiYXR0cmlidXRlRmlsdGVyIiwiTXV0YXRpb25PYnNlcnZlciIsIm9uSHRtbENoYW5nZURldGVjdGVkIiwiZGlzY29ubmVjdCIsImNvbnRyb2xzIiwiQXJyb3dVcCIsIkFycm93RG93biIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJvbmtleWRvd24iLCJvbktleUV2ZW50RGV0ZWN0ZWQiLCJoYW5kbGVyIiwiZ2V0UmFuZG9tVmFsdWVzIiwiY3J5cHRvIiwiYmluZCIsIm1zQ3J5cHRvIiwicm5kczgiLCJVaW50OEFycmF5Iiwicm5nIiwiRXJyb3IiLCJieXRlVG9IZXgiLCJpIiwidG9TdHJpbmciLCJzdWJzdHIiLCJhcnIiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJ0b0xvd2VyQ2FzZSIsIlR5cGVFcnJvciIsIl9ub2RlSWQiLCJfY2xvY2tzZXEiLCJfbGFzdE1TZWNzIiwiX2xhc3ROU2VjcyIsIm9wdGlvbnMiLCJidWYiLCJiIiwiQXJyYXkiLCJjbG9ja3NlcSIsInNlZWRCeXRlcyIsInJhbmRvbSIsIm1zZWNzIiwiRGF0ZSIsIm5vdyIsIm5zZWNzIiwiZHQiLCJ0bCIsInRtaCIsIm4iLCJ2IiwicGFyc2VJbnQiLCJzbGljZSIsIm5hbWUiLCJ2ZXJzaW9uIiwiaGFzaGZ1bmMiLCJnZW5lcmF0ZVVVSUQiLCJ2YWx1ZSIsIm5hbWVzcGFjZSIsInN0ciIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYnl0ZXMiLCJjaGFyQ29kZUF0Iiwic3RyaW5nVG9CeXRlcyIsInNldCIsImVyciIsIkROUyIsIlVSTCIsImdldE91dHB1dExlbmd0aCIsImlucHV0TGVuZ3RoOCIsInNhZmVBZGQiLCJ4IiwieSIsImxzdyIsIm1kNWNtbiIsInEiLCJhIiwicyIsInQiLCJudW0iLCJjbnQiLCJtZDVmZiIsImMiLCJkIiwibWQ1Z2ciLCJtZDVoaCIsIm1kNWlpIiwidjM1IiwibXNnIiwiaW5wdXQiLCJvdXRwdXQiLCJsZW5ndGgzMiIsImhleFRhYiIsImhleCIsImNoYXJBdCIsIm1kNVRvSGV4RW5jb2RlZEFycmF5IiwibGVuIiwib2xkYSIsIm9sZGIiLCJvbGRjIiwib2xkZCIsIndvcmRzVG9NZDUiLCJsZW5ndGg4IiwiVWludDMyQXJyYXkiLCJieXRlc1RvV29yZHMiLCJybmRzIiwiZiIsInoiLCJST1RMIiwiSyIsIkgiLCJpc0FycmF5IiwicHJvdG90eXBlIiwiY2FsbCIsImwiLCJOIiwiTWF0aCIsImNlaWwiLCJNIiwiX2kiLCJqIiwicG93IiwiZmxvb3IiLCJfaTIiLCJXIiwiX3QiLCJlIiwiX3QyIiwiVCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciXSwibWFwcGluZ3MiOiI0bkJBQUEsZ0JBS0EsYUFTRSxXQUFZQSxHQUpMLEtBQUFDLGNBQTZDLEdBQzdDLEtBQUFDLGVBQThDLEdBQzlDLEtBQUFDLFdBQWlDLEtBR3RDQyxLQUFLSixLQUFPQSxFQUNaSSxLQUFLQyxTQUFXLElBQUksVUFBWUwsR0FDaENJLEtBQUtFLE1BQU1OLEVBQU1JLEtBQUtDLFVBQ3RCRCxLQUFLRyxhQUFhSCxLQUFLQyxVQStGM0IsT0E1RlksWUFBQUMsTUFBVixTQUFnQk4sRUFBbUJRLEdBQ2pDLElBQUssSUFBSUMsRUFBUSxFQUFHQSxFQUFRVCxFQUFLVSxTQUFTQyxPQUFR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QSxFQUFFLElBQU0sRUFBSSxJQUFhLElBQVBBLEVBQUUsR0FBV0EsRUFBRSxJQUFNLEdBQUssSUFBTUEsRUFBRSxJQUFNLEdBQUssSUFBTUEsRUFBRSxJQUFNLEVBQUksSUFBYSxJQUFQQSxFQUFFLE9FNUZ4Vix5Q0NVQSxFQVJBLFNBQWlCL0ssR0FDZixJQUFLLEVBQVNBLEdBQ1osTUFBTThGLFVBQVUsZ0JBR2xCLE9BQU9xQixTQUFTbkgsRUFBS3lGLE9BQU8sR0FBSSxHQUFJLE9DTmxDeUcsRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLEdBQUdGLEVBQXlCRSxHQUMzQixPQUFPRixFQUF5QkUsR0FBVUMsUUFHM0MsSUFBSUMsRUFBU0osRUFBeUJFLEdBQVksQ0FHakRDLFFBQVMsSUFPVixPQUhBRSxFQUFvQkgsR0FBVWxCLEtBQUtvQixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUdwRUcsRUFBT0QsUUNuQmZGLEVBQW9CL0MsRUFBSSxDQUFDaUQsRUFBU0csS0FDakMsSUFBSSxJQUFJbE0sS0FBT2tNLEVBQ1hMLEVBQW9CTSxFQUFFRCxFQUFZbE0sS0FBUzZMLEVBQW9CTSxFQUFFSixFQUFTL0wsSUFDNUVvTSxPQUFPQyxlQUFlTixFQUFTL0wsRUFBSyxDQUFFc00sWUFBWSxFQUFNQyxJQUFLTCxFQUFXbE0sTUNKM0U2TCxFQUFvQk0sRUFBSSxDQUFDSyxFQUFLQyxJQUFTTCxPQUFPekIsVUFBVStCLGVBQWU5QixLQUFLNEIsRUFBS0MsR0NDakZaLEVBQW9CYyxFQUFLWixJQUNILG9CQUFYYSxRQUEwQkEsT0FBT0MsYUFDMUNULE9BQU9DLGVBQWVOLEVBQVNhLE9BQU9DLFlBQWEsQ0FBRTFGLE1BQU8sV0FFN0RpRixPQUFPQyxlQUFlTixFQUFTLGFBQWMsQ0FBRTVFLE9BQU8sS0NGdkQwRSxFQUFvQixNIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOYXZUcmVlTm9kZSwgeyBOYXZJdGVtVHlwZXMsIE9mZnNldCB9IGZyb20gJy4vTmF2VHJlZU5vZGUnXG5pbXBvcnQgeyBJTmF2VHJlZUtleVByZXNzT2JzZXJ2YWJsZSB9IGZyb20gJy4vb2JzZXJ2ZXJzL05hdlRyZWVLZXlQcmVzc09ic2VydmVyJ1xuaW1wb3J0IHsgSU5hdlRyZWVIdG1sT2JzZXJ2YWJsZSB9IGZyb20gJy4vb2JzZXJ2ZXJzL05hdlRyZWVIdG1sT2JzZXJ2ZXInXG5pbXBvcnQgeyBJTmF2VHJlZUNsaWNrT2JzZXJ2YWJsZSB9IGZyb20gJy4vb2JzZXJ2ZXJzL05hdlRyZWVDbGlja09ic2VydmVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZUcmVlIGltcGxlbWVudHMgSU5hdlRyZWVIdG1sT2JzZXJ2YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTmF2VHJlZUtleVByZXNzT2JzZXJ2YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTmF2VHJlZUNsaWNrT2JzZXJ2YWJsZSB7XG4gIHB1YmxpYyBlbGVtOiBIVE1MRWxlbWVudFxuICBwdWJsaWMgcm9vdE5vZGU6IE5hdlRyZWVOb2RlXG4gIHB1YmxpYyBub2RlTWFwQnlVdWlkOiBSZWNvcmQ8c3RyaW5nLCBOYXZUcmVlTm9kZT4gPSB7fVxuICBwdWJsaWMgbm9kZU1hcEJ5TGFiZWw6IFJlY29yZDxzdHJpbmcsIE5hdlRyZWVOb2RlPiA9IHt9XG4gIHB1YmxpYyBhY3RpdmVOb2RlOiBOYXZUcmVlTm9kZSB8IG51bGwgPSBudWxsXG5cbiAgY29uc3RydWN0b3IoZWxlbTogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW0gPSBlbGVtXG4gICAgdGhpcy5yb290Tm9kZSA9IG5ldyBOYXZUcmVlTm9kZShlbGVtKVxuICAgIHRoaXMuYnVpbGQoZWxlbSwgdGhpcy5yb290Tm9kZSlcbiAgICB0aGlzLmFjdGl2YXRlTm9kZSh0aGlzLnJvb3ROb2RlKVxuICB9XG5cbiAgcHJvdGVjdGVkIGJ1aWxkKGVsZW06IEhUTUxFbGVtZW50LCBwYXJlbnQ6IE5hdlRyZWVOb2RlKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGVsZW0uY2hpbGRyZW4ubGVuZ3RoOyBpbmRleCArPSAxKSB7XG5cbiAgICAgIGNvbnN0IGNoaWxkRWxlbSA9IGVsZW0uY2hpbGRyZW5baW5kZXhdIGFzIEhUTUxFbGVtZW50XG4gICAgICBpZiAoTmF2VHJlZU5vZGUuaGFzTmF2VHlwZUF0dHJpYnV0ZShjaGlsZEVsZW0pKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IG5ldyBOYXZUcmVlTm9kZShjaGlsZEVsZW0sIHBhcmVudClcbiAgICAgICAgdGhpcy5yZWdpc3Rlck5vZGUoY2hpbGROb2RlKVxuXG4gICAgICAgIGlmIChjaGlsZE5vZGUudHlwZSAhPT0gTmF2SXRlbVR5cGVzLkl0ZW0pIHtcbiAgICAgICAgICB0aGlzLmJ1aWxkKGNoaWxkRWxlbSwgY2hpbGROb2RlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJ1aWxkKGNoaWxkRWxlbSwgcGFyZW50KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCByZWdpc3Rlck5vZGUobm9kZTogTmF2VHJlZU5vZGUpOiB2b2lkIHtcbiAgICB0aGlzLm5vZGVNYXBCeVV1aWRbbm9kZS51dWlkXSA9IG5vZGVcblxuICAgIGlmIChub2RlLmxhYmVsKSB7XG4gICAgICB0aGlzLm5vZGVNYXBCeUxhYmVsW25vZGUubGFiZWxdID0gbm9kZVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZWJ1aWxkKCk6IHZvaWQge1xuICAgIGNvbnN0IHByZXZBY3RpdmVOYXZJdGVtVXVpZCA9IHRoaXMuYWN0aXZlTm9kZT8udXVpZCBhcyBzdHJpbmdcbiAgICB0aGlzLm5vZGVNYXBCeVV1aWQgPSB7fVxuICAgIHRoaXMucm9vdE5vZGUgPSBuZXcgTmF2VHJlZU5vZGUodGhpcy5lbGVtKVxuICAgIHRoaXMuYnVpbGQodGhpcy5lbGVtLCB0aGlzLnJvb3ROb2RlKVxuICAgIHRoaXMuYWN0aXZhdGVOb2RlQnlVdWlkKHByZXZBY3RpdmVOYXZJdGVtVXVpZClcbiAgfVxuXG4gIHB1YmxpYyBhY3RpdmF0ZU5vZGVCeUxhYmVsKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZU1hcEJ5TGFiZWxba2V5XVxuICAgIHRoaXMuYWN0aXZhdGVOb2RlKG5vZGUpXG4gIH1cblxuICBwdWJsaWMgYWN0aXZhdGVOb2RlQnlVdWlkKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZU1hcEJ5VXVpZFtrZXldXG4gICAgdGhpcy5hY3RpdmF0ZU5vZGUobm9kZSlcbiAgfVxuXG4gIHB1YmxpYyBhY3RpdmF0ZU5vZGUobm9kZTogTmF2VHJlZU5vZGUgfCBudWxsKTogdm9pZCB7XG4gICAgaWYgKCFub2RlIHx8IG5vZGUudXVpZCA9PT0gdGhpcy5hY3RpdmVOb2RlPy51dWlkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAobm9kZS5oYXNUeXBlKE5hdkl0ZW1UeXBlcy5JdGVtKSkge1xuICAgICAgdGhpcy5hY3RpdmVOb2RlPy5kZWFjdGl2YXRlKClcbiAgICAgIHRoaXMuYWN0aXZlTm9kZSA9IG5vZGVcbiAgICAgIHRoaXMuYWN0aXZlTm9kZT8uYWN0aXZhdGUoKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjaGlsZE5vZGUgPSBub2RlLmdldEZpcnN0Q2hpbGROb2RlKClcbiAgICAgIHRoaXMuYWN0aXZhdGVOb2RlKGNoaWxkTm9kZSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVhY3RpdmF0ZU5vZGUoKTogdm9pZCB7XG4gICAgdGhpcy5hY3RpdmVOb2RlPy5kZWFjdGl2YXRlKClcbiAgICB0aGlzLmFjdGl2ZU5vZGUgPSBudWxsXG4gIH1cblxuICBwcm90ZWN0ZWQgbW92ZShub2RlOiBOYXZUcmVlTm9kZSB8IG51bGwsIHR5cGU6IE5hdkl0ZW1UeXBlcywgb2Zmc2V0OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIW5vZGUgfHwgIW5vZGUucGFyZW50KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnRcbiAgICBjb25zdCBuZXh0Tm9kZSA9IHBhcmVudE5vZGUuZ2V0Q2hpbGROb2RlKG5vZGUuaW5kZXggKyBvZmZzZXQpXG4gICAgaWYgKHBhcmVudE5vZGUuaGFzVHlwZSh0eXBlKSAmJiBuZXh0Tm9kZSkge1xuICAgICAgdGhpcy5hY3RpdmF0ZU5vZGUobmV4dE5vZGUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW92ZShwYXJlbnROb2RlLCB0eXBlLCBvZmZzZXQpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIHVwKCk6IHZvaWQge1xuICAgIHRoaXMubW92ZSh0aGlzLmFjdGl2ZU5vZGUsIE5hdkl0ZW1UeXBlcy5Sb3csIE9mZnNldC5QcmV2KVxuICB9XG5cbiAgcHVibGljIGRvd24oKTogdm9pZCB7XG4gICAgdGhpcy5tb3ZlKHRoaXMuYWN0aXZlTm9kZSwgTmF2SXRlbVR5cGVzLlJvdywgT2Zmc2V0Lk5leHQpXG4gIH1cblxuICBwdWJsaWMgbGVmdCgpOiB2b2lkIHtcbiAgICB0aGlzLm1vdmUodGhpcy5hY3RpdmVOb2RlLCBOYXZJdGVtVHlwZXMuQ29sdW1uLCBPZmZzZXQuUHJldilcbiAgfVxuXG4gIHB1YmxpYyByaWdodCgpOiB2b2lkIHtcbiAgICB0aGlzLm1vdmUodGhpcy5hY3RpdmVOb2RlLCBOYXZJdGVtVHlwZXMuQ29sdW1uLCBPZmZzZXQuTmV4dClcbiAgfVxufVxuIiwiaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCdcblxuZXhwb3J0IGVudW0gTmF2SXRlbVR5cGVzIHtcbiAgUm93ID0gJ3JvdycsXG4gIENvbHVtbiA9ICdjb2x1bW4nLFxuICBJdGVtID0gJ2l0ZW0nLFxufVxuXG5leHBvcnQgZW51bSBOYXZJdGVtRGF0YUF0dHJzIHtcbiAgTmF2VHlwZSA9ICduYXYnLFxuICBOYXZMYWJlbCA9ICduYXZMYWJlbCcsXG4gIE5hdlV1aWQgPSAnbmF2VXVpZCcsXG4gIEFjdGl2ZU5hdkl0ZW0gPSAnYWN0aXZlTmF2SXRlbScsXG59XG5cbmV4cG9ydCBlbnVtIE9mZnNldCB7XG4gIE5leHQgPSAxLFxuICBQcmV2ID0gLTEsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdlRyZWVOb2RlIHtcbiAgcHJpdmF0ZSBjaGlsZHJlbjogTmF2VHJlZU5vZGVbXSA9IFtdXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGVsZW06IEhUTUxFbGVtZW50LFxuICAgIHB1YmxpYyBwYXJlbnQ6IE5hdlRyZWVOb2RlIHwgbnVsbCA9IG51bGwsXG4gICAgcHVibGljIGluZGV4OiBudW1iZXIgPSAwLFxuICApIHtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICB0aGlzLmluZGV4ID0gcGFyZW50LmNoaWxkcmVuLmxlbmd0aFxuICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2godGhpcylcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oYXNUeXBlKE5hdkl0ZW1UeXBlcy5JdGVtKSkge1xuICAgICAgdGhpcy5lbGVtLnRhYkluZGV4ID0gLTEgLy8gaW4gb3JkZXIgdG8gbmF2aWdhdGUgcHJvZ3JhbW1hdGljYWxseSBhbmQgZWxlbS5mb2N1cygpIHdvcmtzXG4gICAgfVxuXG4gICAgdGhpcy5lbGVtLmRhdGFzZXRbTmF2SXRlbURhdGFBdHRycy5OYXZVdWlkXSA9IHV1aWR2NCgpXG4gIH1cblxuICBwdWJsaWMgZ2V0IHR5cGUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbS5kYXRhc2V0W05hdkl0ZW1EYXRhQXR0cnMuTmF2VHlwZV0gfHwgbnVsbFxuICB9XG5cbiAgcHVibGljIGdldCB1dWlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbS5kYXRhc2V0W05hdkl0ZW1EYXRhQXR0cnMuTmF2VXVpZF0gYXMgc3RyaW5nXG4gIH1cblxuICBwdWJsaWMgZ2V0IGxhYmVsKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmVsZW0uZGF0YXNldFtOYXZJdGVtRGF0YUF0dHJzLk5hdkxhYmVsXSB8fCBudWxsXG4gIH1cblxuICBwdWJsaWMgZ2V0IGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMuZWxlbS5kYXRhc2V0W05hdkl0ZW1EYXRhQXR0cnMuQWN0aXZlTmF2SXRlbV0pXG4gIH1cblxuICBwdWJsaWMgaGFzVHlwZSh0eXBlOiBOYXZJdGVtVHlwZXMpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSB0eXBlXG4gIH1cblxuICBwdWJsaWMgZ2V0Q2hpbGROb2RlKGluZGV4OiBudW1iZXIpOiBOYXZUcmVlTm9kZSB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuW2luZGV4XSB8fCBudWxsXG4gIH1cblxuICBwdWJsaWMgZ2V0Rmlyc3RDaGlsZE5vZGUoKTogTmF2VHJlZU5vZGUgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDaGlsZE5vZGUoMClcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaGFzTmF2VHlwZUF0dHJpYnV0ZShlbGVtOiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKGVsZW0uZGF0YXNldFtOYXZJdGVtRGF0YUF0dHJzLk5hdlR5cGVdKVxuICB9XG5cbiAgcHVibGljIGFjdGl2YXRlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0FjdGl2ZSAmJiB0aGlzLnR5cGUgPT09IE5hdkl0ZW1UeXBlcy5JdGVtKSB7XG4gICAgICB0aGlzLmVsZW0uZGF0YXNldFtOYXZJdGVtRGF0YUF0dHJzLkFjdGl2ZU5hdkl0ZW1dID0gJ3RydWUnXG4gICAgICB0aGlzLmVsZW0uZm9jdXMoKVxuICAgICAgdGhpcy5lbGVtLnNjcm9sbEludG9WaWV3KHsgYmxvY2s6ICdjZW50ZXInLCBpbmxpbmU6ICdjZW50ZXInLCBiZWhhdmlvcjogJ3Ntb290aCcgfSkgLy8gc2Nyb2xsIHRvIGEgZm9jdXNlZCBlbGVtZW50IHdoZW4gd2UgaGF2ZSBhIHNjcm9sbFxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBkZWFjdGl2YXRlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICB0aGlzLmVsZW0uYmx1cigpXG4gICAgICBkZWxldGUgdGhpcy5lbGVtLmRhdGFzZXRbTmF2SXRlbURhdGFBdHRycy5BY3RpdmVOYXZJdGVtXVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IE5hdlRyZWUgZnJvbSAnLi9OYXZUcmVlJ1xuaW1wb3J0IE5hdlRyZWVIdG1sT2JzZXJ2ZXIgZnJvbSAnLi9vYnNlcnZlcnMvTmF2VHJlZUh0bWxPYnNlcnZlcidcbmltcG9ydCBOYXZUcmVlQ2xpY2tPYnNlcnZlciBmcm9tICcuL29ic2VydmVycy9OYXZUcmVlQ2xpY2tPYnNlcnZlcidcbmltcG9ydCBOYXZUcmVlS2V5UHJlc3NPYnNlcnZlciBmcm9tICcuL29ic2VydmVycy9OYXZUcmVlS2V5UHJlc3NPYnNlcnZlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2aWdhdG9yIHtcbiAgcHVibGljIG5hdlRyZWU6IE5hdlRyZWUgfCBudWxsID0gbnVsbFxuICBwdWJsaWMgbmF2VHJlZUh0bWxPYnNlcnZlciA9IG5ldyBOYXZUcmVlSHRtbE9ic2VydmVyKClcbiAgcHVibGljIG5hdlRyZWVDbGlja09ic2VydmVyID0gbmV3IE5hdlRyZWVDbGlja09ic2VydmVyKClcbiAgcHVibGljIG5hdlRyZWVLZXlQcmVzc09ic2VydmVyID0gbmV3IE5hdlRyZWVLZXlQcmVzc09ic2VydmVyKClcblxuICBwdWJsaWMgb2JzZXJ2ZShlbGVtOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIGlmICghZWxlbS5pc0VxdWFsTm9kZSh0aGlzLm5hdlRyZWUgJiYgdGhpcy5uYXZUcmVlLmVsZW0pKSB7XG4gICAgICB0aGlzLm5hdlRyZWUgPSBuZXcgTmF2VHJlZShlbGVtKVxuICAgICAgdGhpcy5uYXZUcmVlSHRtbE9ic2VydmVyLndhdGNoKHRoaXMubmF2VHJlZSlcbiAgICAgIHRoaXMubmF2VHJlZUNsaWNrT2JzZXJ2ZXIud2F0Y2godGhpcy5uYXZUcmVlKVxuICAgICAgdGhpcy5uYXZUcmVlS2V5UHJlc3NPYnNlcnZlci53YXRjaCh0aGlzLm5hdlRyZWUpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFjdGl2YXRlTmF2SXRlbUJ5TGFiZWwoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLm5hdlRyZWU/LmFjdGl2YXRlTm9kZUJ5TGFiZWwoa2V5KVxuICB9XG5cbiAgcHVibGljIGFjdGl2YXRlTmF2SXRlbUJ5VXVpZChrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMubmF2VHJlZT8uYWN0aXZhdGVOb2RlQnlVdWlkKGtleSlcbiAgfVxuXG4gIHB1YmxpYyBkZWFjdGl2YXRlTmF2SXRlbSgpOiB2b2lkIHtcbiAgICB0aGlzLm5hdlRyZWU/LmRlYWN0aXZhdGVOb2RlKClcbiAgfVxufVxuXG4vLyBUT0RPOiBpbXBsZW1lbnQgd2l0aG91dCBidWlsZGluZyB0cmVlLCBqdXN0IHNldCBkYXRhIGF0dHJpYnV0ZXMgYW5kIHRlc3Qgc3BlZWRcbiIsImltcG9ydCBOYXZpZ2F0b3IgZnJvbSAnLi9OYXZpZ2F0b3InXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgSHRtbERvbU5hdmlnYXRvcjogTmF2aWdhdG9yO1xuICB9XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICB3aW5kb3cuSHRtbERvbU5hdmlnYXRvciA9IG5ldyBOYXZpZ2F0b3IoKVxufVxuIiwiaW1wb3J0IHsgTmF2SXRlbURhdGFBdHRycywgTmF2SXRlbVR5cGVzIH0gZnJvbSAnLi4vTmF2VHJlZU5vZGUnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSU5hdlRyZWVDbGlja09ic2VydmFibGUge1xuICBhY3RpdmF0ZU5vZGVCeVV1aWQobm9kZTogc3RyaW5nKTogdm9pZFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZUcmVlQ2xpY2tPYnNlcnZlciB7XG4gIHByaXZhdGUgb2JzZXJ2YWJsZTogSU5hdlRyZWVDbGlja09ic2VydmFibGUgfCBudWxsID0gbnVsbFxuXG4gIHB1YmxpYyB3YXRjaCA9IChvYnNlcnZhYmxlOiBJTmF2VHJlZUNsaWNrT2JzZXJ2YWJsZSk6IHZvaWQgPT4ge1xuICAgIHRoaXMudW53YXRjaCgpXG5cbiAgICB0aGlzLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlXG4gICAgd2luZG93Lm9uY2xpY2sgPSB0aGlzLm9uQ2xpY2tFdmVudERldGVjdGVkXG4gIH1cblxuICBwdWJsaWMgb25DbGlja0V2ZW50RGV0ZWN0ZWQgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHtcbiAgICBjb25zdCBlbGVtID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xvc2VzdDxIVE1MRWxlbWVudD4oYFtkYXRhLW5hdj1cIiR7TmF2SXRlbVR5cGVzLkl0ZW19XCJdYClcblxuICAgIGlmICghZWxlbSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5vYnNlcnZhYmxlPy5hY3RpdmF0ZU5vZGVCeVV1aWQoZWxlbS5kYXRhc2V0W05hdkl0ZW1EYXRhQXR0cnMuTmF2VXVpZF0gYXMgc3RyaW5nKVxuICB9XG5cbiAgcHVibGljIHVud2F0Y2ggPSAoKTogdm9pZCA9PiB7XG4gICAgd2luZG93Lm9uY2xpY2sgPSBudWxsXG4gICAgdGhpcy5vYnNlcnZhYmxlID0gbnVsbFxuICB9XG59XG4iLCJleHBvcnQgaW50ZXJmYWNlIElOYXZUcmVlSHRtbE9ic2VydmFibGUge1xuICBlbGVtOiBIVE1MRWxlbWVudFxuXG4gIHJlYnVpbGQoKTogdm9pZFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZUcmVlSHRtbE9ic2VydmVyIHtcbiAgcHJpdmF0ZSBvYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlciB8IG51bGwgPSBudWxsXG4gIHByaXZhdGUgb2JzZXJ2YWJsZTogSU5hdlRyZWVIdG1sT2JzZXJ2YWJsZSB8IG51bGwgPSBudWxsXG4gIHByaXZhdGUgb2JzZXJ2ZXJDb25maWc6IE11dGF0aW9uT2JzZXJ2ZXJJbml0ID0ge1xuICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgIHN1YnRyZWU6IHRydWUsXG4gICAgYXR0cmlidXRlRmlsdGVyOiBbJ2RhdGEtbmF2J10sXG4gIH1cblxuICBwdWJsaWMgd2F0Y2ggPSAob2JzZXJ2YWJsZTogSU5hdlRyZWVIdG1sT2JzZXJ2YWJsZSk6IHZvaWQgPT4ge1xuICAgIHRoaXMudW53YXRjaCgpXG5cbiAgICB0aGlzLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlXG4gICAgdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMub25IdG1sQ2hhbmdlRGV0ZWN0ZWQpXG4gICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMub2JzZXJ2YWJsZS5lbGVtLCB0aGlzLm9ic2VydmVyQ29uZmlnKVxuICB9XG5cbiAgcHVibGljIG9uSHRtbENoYW5nZURldGVjdGVkID0gKCk6IHZvaWQgPT4ge1xuICAgIHRoaXMub2JzZXJ2YWJsZT8ucmVidWlsZCgpXG4gIH1cblxuICBwdWJsaWMgdW53YXRjaCA9ICgpOiB2b2lkID0+IHtcbiAgICB0aGlzLm9ic2VydmVyPy5kaXNjb25uZWN0KClcbiAgICB0aGlzLm9ic2VydmVyID0gbnVsbFxuICAgIHRoaXMub2JzZXJ2YWJsZSA9IG51bGxcbiAgfVxufVxuIiwiZXhwb3J0IGludGVyZmFjZSBJTmF2VHJlZUtleVByZXNzT2JzZXJ2YWJsZSB7XG4gIHVwKCk6IHZvaWRcbiAgZG93bigpOiB2b2lkXG4gIGxlZnQoKTogdm9pZFxuICByaWdodCgpOiB2b2lkXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdlRyZWVLZXlQcmVzc09ic2VydmVyIHtcbiAgcHJpdmF0ZSBvYnNlcnZhYmxlOiBJTmF2VHJlZUtleVByZXNzT2JzZXJ2YWJsZSB8IG51bGwgPSBudWxsXG4gIHByaXZhdGUgY29udHJvbHM6IFJlY29yZDxzdHJpbmcsICgpID0+IHZvaWQ+ID0ge1xuICAgIEFycm93VXA6ICgpID0+IHRoaXMub2JzZXJ2YWJsZT8udXAoKSxcbiAgICBBcnJvd0Rvd246ICgpID0+IHRoaXMub2JzZXJ2YWJsZT8uZG93bigpLFxuICAgIEFycm93TGVmdDogKCkgPT4gdGhpcy5vYnNlcnZhYmxlPy5sZWZ0KCksXG4gICAgQXJyb3dSaWdodDogKCkgPT4gdGhpcy5vYnNlcnZhYmxlPy5yaWdodCgpLFxuICB9XG5cbiAgcHVibGljIHdhdGNoID0gKG9ic2VydmFibGU6IElOYXZUcmVlS2V5UHJlc3NPYnNlcnZhYmxlKTogdm9pZCA9PiB7XG4gICAgdGhpcy51bndhdGNoKClcblxuICAgIHRoaXMub2JzZXJ2YWJsZSA9IG9ic2VydmFibGVcbiAgICB3aW5kb3cub25rZXlkb3duID0gdGhpcy5vbktleUV2ZW50RGV0ZWN0ZWRcbiAgfVxuXG4gIHB1YmxpYyBvbktleUV2ZW50RGV0ZWN0ZWQgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5jb250cm9sc1tldmVudC5rZXldXG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIoKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB1bndhdGNoID0gKCk6IHZvaWQgPT4ge1xuICAgIHdpbmRvdy5vbmtleWRvd24gPSBudWxsXG4gICAgdGhpcy5vYnNlcnZhYmxlID0gbnVsbFxuICB9XG59XG4iLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbi8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi4gQWxzbyxcbi8vIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNyeXB0byAobXNDcnlwdG8pIG9uIElFMTEuXG52YXIgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSB8fCB0eXBlb2YgbXNDcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pO1xudmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiLCJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiLCJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxudmFyIGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyKSB7XG4gIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICB2YXIgdXVpZCA9IChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiLCJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnOyAvLyAqKmB2MSgpYCAtIEdlbmVyYXRlIHRpbWUtYmFzZWQgVVVJRCoqXG4vL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL0xpb3NLL1VVSUQuanNcbi8vIGFuZCBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvdXVpZC5odG1sXG5cbnZhciBfbm9kZUlkO1xuXG52YXIgX2Nsb2Nrc2VxOyAvLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcblxuXG52YXIgX2xhc3RNU2VjcyA9IDA7XG52YXIgX2xhc3ROU2VjcyA9IDA7IC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQgZm9yIEFQSSBkZXRhaWxzXG5cbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICB2YXIgYiA9IGJ1ZiB8fCBuZXcgQXJyYXkoMTYpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgdmFyIGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jbG9ja3NlcSA6IF9jbG9ja3NlcTsgLy8gbm9kZSBhbmQgY2xvY2tzZXEgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byByYW5kb20gdmFsdWVzIGlmIHRoZXkncmUgbm90XG4gIC8vIHNwZWNpZmllZC4gIFdlIGRvIHRoaXMgbGF6aWx5IHRvIG1pbmltaXplIGlzc3VlcyByZWxhdGVkIHRvIGluc3VmZmljaWVudFxuICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgdmFyIHNlZWRCeXRlcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC41LCBjcmVhdGUgYW5kIDQ4LWJpdCBub2RlIGlkLCAoNDcgcmFuZG9tIGJpdHMgKyBtdWx0aWNhc3QgYml0ID0gMSlcbiAgICAgIG5vZGUgPSBfbm9kZUlkID0gW3NlZWRCeXRlc1swXSB8IDB4MDEsIHNlZWRCeXRlc1sxXSwgc2VlZEJ5dGVzWzJdLCBzZWVkQnl0ZXNbM10sIHNlZWRCeXRlc1s0XSwgc2VlZEJ5dGVzWzVdXTtcbiAgICB9XG5cbiAgICBpZiAoY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuMi4yLCByYW5kb21pemUgKDE0IGJpdCkgY2xvY2tzZXFcbiAgICAgIGNsb2Nrc2VxID0gX2Nsb2Nrc2VxID0gKHNlZWRCeXRlc1s2XSA8PCA4IHwgc2VlZEJ5dGVzWzddKSAmIDB4M2ZmZjtcbiAgICB9XG4gIH0gLy8gVVVJRCB0aW1lc3RhbXBzIGFyZSAxMDAgbmFuby1zZWNvbmQgdW5pdHMgc2luY2UgdGhlIEdyZWdvcmlhbiBlcG9jaCxcbiAgLy8gKDE1ODItMTAtMTUgMDA6MDApLiAgSlNOdW1iZXJzIGFyZW4ndCBwcmVjaXNlIGVub3VnaCBmb3IgdGhpcywgc29cbiAgLy8gdGltZSBpcyBoYW5kbGVkIGludGVybmFsbHkgYXMgJ21zZWNzJyAoaW50ZWdlciBtaWxsaXNlY29uZHMpIGFuZCAnbnNlY3MnXG4gIC8vICgxMDAtbmFub3NlY29uZHMgb2Zmc2V0IGZyb20gbXNlY3MpIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDAuXG5cblxuICB2YXIgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogRGF0ZS5ub3coKTsgLy8gUGVyIDQuMi4xLjIsIHVzZSBjb3VudCBvZiB1dWlkJ3MgZ2VuZXJhdGVkIGR1cmluZyB0aGUgY3VycmVudCBjbG9ja1xuICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9ja1xuXG4gIHZhciBuc2VjcyA9IG9wdGlvbnMubnNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubnNlY3MgOiBfbGFzdE5TZWNzICsgMTsgLy8gVGltZSBzaW5jZSBsYXN0IHV1aWQgY3JlYXRpb24gKGluIG1zZWNzKVxuXG4gIHZhciBkdCA9IG1zZWNzIC0gX2xhc3RNU2VjcyArIChuc2VjcyAtIF9sYXN0TlNlY3MpIC8gMTAwMDA7IC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cblxuICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsb2Nrc2VxID0gY2xvY2tzZXEgKyAxICYgMHgzZmZmO1xuICB9IC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcblxuXG4gIGlmICgoZHQgPCAwIHx8IG1zZWNzID4gX2xhc3RNU2VjcykgJiYgb3B0aW9ucy5uc2VjcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbnNlY3MgPSAwO1xuICB9IC8vIFBlciA0LjIuMS4yIFRocm93IGVycm9yIGlmIHRvbyBtYW55IHV1aWRzIGFyZSByZXF1ZXN0ZWRcblxuXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInV1aWQudjEoKTogQ2FuJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjXCIpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxOyAvLyBQZXIgNC4xLjQgLSBDb252ZXJ0IGZyb20gdW5peCBlcG9jaCB0byBHcmVnb3JpYW4gZXBvY2hcblxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDsgLy8gYHRpbWVfbG93YFxuXG4gIHZhciB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7IC8vIGB0aW1lX21pZGBcblxuICB2YXIgdG1oID0gbXNlY3MgLyAweDEwMDAwMDAwMCAqIDEwMDAwICYgMHhmZmZmZmZmO1xuICBiW2krK10gPSB0bWggPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bWggJiAweGZmOyAvLyBgdGltZV9oaWdoX2FuZF92ZXJzaW9uYFxuXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMjQgJiAweGYgfCAweDEwOyAvLyBpbmNsdWRlIHZlcnNpb25cblxuICBiW2krK10gPSB0bWggPj4+IDE2ICYgMHhmZjsgLy8gYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgIChQZXIgNC4yLjIgLSBpbmNsdWRlIHZhcmlhbnQpXG5cbiAgYltpKytdID0gY2xvY2tzZXEgPj4+IDggfCAweDgwOyAvLyBgY2xvY2tfc2VxX2xvd2BcblxuICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7IC8vIGBub2RlYFxuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgYltpICsgbl0gPSBub2RlW25dO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBzdHJpbmdpZnkoYik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHYxOyIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcblxuZnVuY3Rpb24gcGFyc2UodXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIHZhciB2O1xuICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBQYXJzZSAjIyMjIyMjIy0uLi4uLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMCwgOCksIDE2KSkgPj4+IDI0O1xuICBhcnJbMV0gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsyXSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbM10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tIyMjIy0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzRdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDksIDEzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzVdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tIyMjIy0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls2XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxNCwgMTgpLCAxNikpID4+PiA4O1xuICBhcnJbN10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLSMjIyMtLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzhdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE5LCAyMyksIDE2KSkgPj4+IDg7XG4gIGFycls5XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tLi4uLi0jIyMjIyMjIyMjIyNcbiAgLy8gKFVzZSBcIi9cIiB0byBhdm9pZCAzMi1iaXQgdHJ1bmNhdGlvbiB3aGVuIGJpdC1zaGlmdGluZyBoaWdoLW9yZGVyIGJ5dGVzKVxuXG4gIGFyclsxMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMjQsIDM2KSwgMTYpKSAvIDB4MTAwMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTFdID0gdiAvIDB4MTAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzEyXSA9IHYgPj4+IDI0ICYgMHhmZjtcbiAgYXJyWzEzXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzE0XSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbMTVdID0gdiAmIDB4ZmY7XG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlOyIsImltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgdmFyIGJ5dGVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuXG4gIHJldHVybiBieXRlcztcbn1cblxuZXhwb3J0IHZhciBETlMgPSAnNmJhN2I4MTAtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydCB2YXIgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lc3BhY2UgPSBwYXJzZShuYW1lc3BhY2UpO1xuICAgIH1cblxuICAgIGlmIChuYW1lc3BhY2UubGVuZ3RoICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuXG5cbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5KGJ5dGVzKTtcbiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcblxuXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iLCIvKlxuICogQnJvd3Nlci1jb21wYXRpYmxlIEphdmFTY3JpcHQgTUQ1XG4gKlxuICogTW9kaWZpY2F0aW9uIG9mIEphdmFTY3JpcHQgTUQ1XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmx1ZWltcC9KYXZhU2NyaXB0LU1ENVxuICpcbiAqIENvcHlyaWdodCAyMDExLCBTZWJhc3RpYW4gVHNjaGFuXG4gKiBodHRwczovL2JsdWVpbXAubmV0XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqXG4gKiBCYXNlZCBvblxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBSU0EgRGF0YSBTZWN1cml0eSwgSW5jLiBNRDUgTWVzc2FnZVxuICogRGlnZXN0IEFsZ29yaXRobSwgYXMgZGVmaW5lZCBpbiBSRkMgMTMyMS5cbiAqIFZlcnNpb24gMi4yIENvcHlyaWdodCAoQykgUGF1bCBKb2huc3RvbiAxOTk5IC0gMjAwOVxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBMaWNlbnNlXG4gKiBTZWUgaHR0cDovL3BhamhvbWUub3JnLnVrL2NyeXB0L21kNSBmb3IgbW9yZSBpbmZvLlxuICovXG5mdW5jdGlvbiBtZDUoYnl0ZXMpIHtcbiAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgbXNnID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGJ5dGVzKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KG1zZy5sZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ5dGVzW2ldID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1kNVRvSGV4RW5jb2RlZEFycmF5KHdvcmRzVG9NZDUoYnl0ZXNUb1dvcmRzKGJ5dGVzKSwgYnl0ZXMubGVuZ3RoICogOCkpO1xufVxuLypcbiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcyB0byBhbiBhcnJheSBvZiBieXRlc1xuICovXG5cblxuZnVuY3Rpb24gbWQ1VG9IZXhFbmNvZGVkQXJyYXkoaW5wdXQpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICB2YXIgbGVuZ3RoMzIgPSBpbnB1dC5sZW5ndGggKiAzMjtcbiAgdmFyIGhleFRhYiA9ICcwMTIzNDU2Nzg5YWJjZGVmJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDMyOyBpICs9IDgpIHtcbiAgICB2YXIgeCA9IGlucHV0W2kgPj4gNV0gPj4+IGkgJSAzMiAmIDB4ZmY7XG4gICAgdmFyIGhleCA9IHBhcnNlSW50KGhleFRhYi5jaGFyQXQoeCA+Pj4gNCAmIDB4MGYpICsgaGV4VGFiLmNoYXJBdCh4ICYgMHgwZiksIDE2KTtcbiAgICBvdXRwdXQucHVzaChoZXgpO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIG91dHB1dCBsZW5ndGggd2l0aCBwYWRkaW5nIGFuZCBiaXQgbGVuZ3RoXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRPdXRwdXRMZW5ndGgoaW5wdXRMZW5ndGg4KSB7XG4gIHJldHVybiAoaW5wdXRMZW5ndGg4ICsgNjQgPj4+IDkgPDwgNCkgKyAxNCArIDE7XG59XG4vKlxuICogQ2FsY3VsYXRlIHRoZSBNRDUgb2YgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcywgYW5kIGEgYml0IGxlbmd0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHdvcmRzVG9NZDUoeCwgbGVuKSB7XG4gIC8qIGFwcGVuZCBwYWRkaW5nICovXG4gIHhbbGVuID4+IDVdIHw9IDB4ODAgPDwgbGVuICUgMzI7XG4gIHhbZ2V0T3V0cHV0TGVuZ3RoKGxlbikgLSAxXSA9IGxlbjtcbiAgdmFyIGEgPSAxNzMyNTg0MTkzO1xuICB2YXIgYiA9IC0yNzE3MzM4Nzk7XG4gIHZhciBjID0gLTE3MzI1ODQxOTQ7XG4gIHZhciBkID0gMjcxNzMzODc4O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICB2YXIgb2xkYSA9IGE7XG4gICAgdmFyIG9sZGIgPSBiO1xuICAgIHZhciBvbGRjID0gYztcbiAgICB2YXIgb2xkZCA9IGQ7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaV0sIDcsIC02ODA4NzY5MzYpO1xuICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyAxXSwgMTIsIC0zODk1NjQ1ODYpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAyXSwgMTcsIDYwNjEwNTgxOSk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDNdLCAyMiwgLTEwNDQ1MjUzMzApO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNywgLTE3NjQxODg5Nyk7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDVdLCAxMiwgMTIwMDA4MDQyNik7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNywgLTE0NzMyMzEzNDEpO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyA3XSwgMjIsIC00NTcwNTk4Myk7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA3LCAxNzcwMDM1NDE2KTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgOV0sIDEyLCAtMTk1ODQxNDQxNyk7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTcsIC00MjA2Myk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDExXSwgMjIsIC0xOTkwNDA0MTYyKTtcbiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA3LCAxODA0NjAzNjgyKTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMTNdLCAxMiwgLTQwMzQxMTAxKTtcbiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNywgLTE1MDIwMDIyOTApO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxNV0sIDIyLCAxMjM2NTM1MzI5KTtcbiAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgMV0sIDUsIC0xNjU3OTY1MTApO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyA2XSwgOSwgLTEwNjk1MDE2MzIpO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE0LCA2NDM3MTc3MTMpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2ldLCAyMCwgLTM3Mzg5NzMwMik7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA1LCAtNzAxNTU4NjkxKTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTBdLCA5LCAzODAxNjA4Myk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTQsIC02NjA0NzgzMzUpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyA0XSwgMjAsIC00MDU1Mzc4NDgpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNSwgNTY4NDQ2NDM4KTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTRdLCA5LCAtMTAxOTgwMzY5MCk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDNdLCAxNCwgLTE4NzM2Mzk2MSk7XG4gICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDhdLCAyMCwgMTE2MzUzMTUwMSk7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDEzXSwgNSwgLTE0NDQ2ODE0NjcpO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAyXSwgOSwgLTUxNDAzNzg0KTtcbiAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgN10sIDE0LCAxNzM1MzI4NDczKTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgMTJdLCAyMCwgLTE5MjY2MDc3MzQpO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyA1XSwgNCwgLTM3ODU1OCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDhdLCAxMSwgLTIwMjI1NzQ0NjMpO1xuICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE2LCAxODM5MDMwNTYyKTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTRdLCAyMywgLTM1MzA5NTU2KTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMV0sIDQsIC0xNTMwOTkyMDYwKTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgNF0sIDExLCAxMjcyODkzMzUzKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgN10sIDE2LCAtMTU1NDk3NjMyKTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTBdLCAyMywgLTEwOTQ3MzA2NDApO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDQsIDY4MTI3OTE3NCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaV0sIDExLCAtMzU4NTM3MjIyKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgM10sIDE2LCAtNzIyNTIxOTc5KTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgNl0sIDIzLCA3NjAyOTE4OSk7XG4gICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDldLCA0LCAtNjQwMzY0NDg3KTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgMTJdLCAxMSwgLTQyMTgxNTgzNSk7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTYsIDUzMDc0MjUyMCk7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDJdLCAyMywgLTk5NTMzODY1MSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaV0sIDYsIC0xOTg2MzA4NDQpO1xuICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyA3XSwgMTAsIDExMjY4OTE0MTUpO1xuICAgIGMgPSBtZDVpaShjLCBkLCBhLCBiLCB4W2kgKyAxNF0sIDE1LCAtMTQxNjM1NDkwNSk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDVdLCAyMSwgLTU3NDM0MDU1KTtcbiAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA2LCAxNzAwNDg1NTcxKTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgM10sIDEwLCAtMTg5NDk4NjYwNik7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTUsIC0xMDUxNTIzKTtcbiAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA2LCAxODczMzEzMzU5KTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgMTVdLCAxMCwgLTMwNjExNzQ0KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE1LCAtMTU2MDE5ODM4MCk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDEzXSwgMjEsIDEzMDkxNTE2NDkpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNiwgLTE0NTUyMzA3MCk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDExXSwgMTAsIC0xMTIwMjEwMzc5KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE1LCA3MTg3ODcyNTkpO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyA5XSwgMjEsIC0zNDM0ODU1NTEpO1xuICAgIGEgPSBzYWZlQWRkKGEsIG9sZGEpO1xuICAgIGIgPSBzYWZlQWRkKGIsIG9sZGIpO1xuICAgIGMgPSBzYWZlQWRkKGMsIG9sZGMpO1xuICAgIGQgPSBzYWZlQWRkKGQsIG9sZGQpO1xuICB9XG5cbiAgcmV0dXJuIFthLCBiLCBjLCBkXTtcbn1cbi8qXG4gKiBDb252ZXJ0IGFuIGFycmF5IGJ5dGVzIHRvIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHNcbiAqIENoYXJhY3RlcnMgPjI1NSBoYXZlIHRoZWlyIGhpZ2gtYnl0ZSBzaWxlbnRseSBpZ25vcmVkLlxuICovXG5cblxuZnVuY3Rpb24gYnl0ZXNUb1dvcmRzKGlucHV0KSB7XG4gIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgbGVuZ3RoOCA9IGlucHV0Lmxlbmd0aCAqIDg7XG4gIHZhciBvdXRwdXQgPSBuZXcgVWludDMyQXJyYXkoZ2V0T3V0cHV0TGVuZ3RoKGxlbmd0aDgpKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDg7IGkgKz0gOCkge1xuICAgIG91dHB1dFtpID4+IDVdIHw9IChpbnB1dFtpIC8gOF0gJiAweGZmKSA8PCBpICUgMzI7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuLypcbiAqIEFkZCBpbnRlZ2Vycywgd3JhcHBpbmcgYXQgMl4zMi4gVGhpcyB1c2VzIDE2LWJpdCBvcGVyYXRpb25zIGludGVybmFsbHlcbiAqIHRvIHdvcmsgYXJvdW5kIGJ1Z3MgaW4gc29tZSBKUyBpbnRlcnByZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBzYWZlQWRkKHgsIHkpIHtcbiAgdmFyIGxzdyA9ICh4ICYgMHhmZmZmKSArICh5ICYgMHhmZmZmKTtcbiAgdmFyIG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICByZXR1cm4gbXN3IDw8IDE2IHwgbHN3ICYgMHhmZmZmO1xufVxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpdFJvdGF0ZUxlZnQobnVtLCBjbnQpIHtcbiAgcmV0dXJuIG51bSA8PCBjbnQgfCBudW0gPj4+IDMyIC0gY250O1xufVxuLypcbiAqIFRoZXNlIGZ1bmN0aW9ucyBpbXBsZW1lbnQgdGhlIGZvdXIgYmFzaWMgb3BlcmF0aW9ucyB0aGUgYWxnb3JpdGhtIHVzZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBtZDVjbW4ocSwgYSwgYiwgeCwgcywgdCkge1xuICByZXR1cm4gc2FmZUFkZChiaXRSb3RhdGVMZWZ0KHNhZmVBZGQoc2FmZUFkZChhLCBxKSwgc2FmZUFkZCh4LCB0KSksIHMpLCBiKTtcbn1cblxuZnVuY3Rpb24gbWQ1ZmYoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBjIHwgfmIgJiBkLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1Z2coYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBkIHwgYyAmIH5kLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1aGgoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7XG59XG5cbmZ1bmN0aW9uIG1kNWlpKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIG1kNWNtbihjIF4gKGIgfCB+ZCksIGEsIGIsIHgsIHMsIHQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZDU7IiwiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgbWQ1IGZyb20gJy4vbWQ1LmpzJztcbnZhciB2MyA9IHYzNSgndjMnLCAweDMwLCBtZDUpO1xuZXhwb3J0IGRlZmF1bHQgdjM7IiwiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwiLy8gQWRhcHRlZCBmcm9tIENocmlzIFZlbmVzcycgU0hBMSBjb2RlIGF0XG4vLyBodHRwOi8vd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL3NoYTEuaHRtbFxuZnVuY3Rpb24gZihzLCB4LCB5LCB6KSB7XG4gIHN3aXRjaCAocykge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiB4ICYgeSBeIH54ICYgejtcblxuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiB4IF4geSBeIHo7XG5cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4geCAmIHkgXiB4ICYgeiBeIHkgJiB6O1xuXG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIHggXiB5IF4gejtcbiAgfVxufVxuXG5mdW5jdGlvbiBST1RMKHgsIG4pIHtcbiAgcmV0dXJuIHggPDwgbiB8IHggPj4+IDMyIC0gbjtcbn1cblxuZnVuY3Rpb24gc2hhMShieXRlcykge1xuICB2YXIgSyA9IFsweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGNhNjJjMWQ2XTtcbiAgdmFyIEggPSBbMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMF07XG5cbiAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgbXNnID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGJ5dGVzKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgICBieXRlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ5dGVzLnB1c2gobXNnLmNoYXJDb2RlQXQoaSkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShieXRlcykpIHtcbiAgICAvLyBDb252ZXJ0IEFycmF5LWxpa2UgdG8gQXJyYXlcbiAgICBieXRlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJ5dGVzKTtcbiAgfVxuXG4gIGJ5dGVzLnB1c2goMHg4MCk7XG4gIHZhciBsID0gYnl0ZXMubGVuZ3RoIC8gNCArIDI7XG4gIHZhciBOID0gTWF0aC5jZWlsKGwgLyAxNik7XG4gIHZhciBNID0gbmV3IEFycmF5KE4pO1xuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBOOyArK19pKSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50MzJBcnJheSgxNik7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIGFycltqXSA9IGJ5dGVzW19pICogNjQgKyBqICogNF0gPDwgMjQgfCBieXRlc1tfaSAqIDY0ICsgaiAqIDQgKyAxXSA8PCAxNiB8IGJ5dGVzW19pICogNjQgKyBqICogNCArIDJdIDw8IDggfCBieXRlc1tfaSAqIDY0ICsgaiAqIDQgKyAzXTtcbiAgICB9XG5cbiAgICBNW19pXSA9IGFycjtcbiAgfVxuXG4gIE1bTiAtIDFdWzE0XSA9IChieXRlcy5sZW5ndGggLSAxKSAqIDggLyBNYXRoLnBvdygyLCAzMik7XG4gIE1bTiAtIDFdWzE0XSA9IE1hdGguZmxvb3IoTVtOIC0gMV1bMTRdKTtcbiAgTVtOIC0gMV1bMTVdID0gKGJ5dGVzLmxlbmd0aCAtIDEpICogOCAmIDB4ZmZmZmZmZmY7XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgTjsgKytfaTIpIHtcbiAgICB2YXIgVyA9IG5ldyBVaW50MzJBcnJheSg4MCk7XG5cbiAgICBmb3IgKHZhciB0ID0gMDsgdCA8IDE2OyArK3QpIHtcbiAgICAgIFdbdF0gPSBNW19pMl1bdF07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX3QgPSAxNjsgX3QgPCA4MDsgKytfdCkge1xuICAgICAgV1tfdF0gPSBST1RMKFdbX3QgLSAzXSBeIFdbX3QgLSA4XSBeIFdbX3QgLSAxNF0gXiBXW190IC0gMTZdLCAxKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IEhbMF07XG4gICAgdmFyIGIgPSBIWzFdO1xuICAgIHZhciBjID0gSFsyXTtcbiAgICB2YXIgZCA9IEhbM107XG4gICAgdmFyIGUgPSBIWzRdO1xuXG4gICAgZm9yICh2YXIgX3QyID0gMDsgX3QyIDwgODA7ICsrX3QyKSB7XG4gICAgICB2YXIgcyA9IE1hdGguZmxvb3IoX3QyIC8gMjApO1xuICAgICAgdmFyIFQgPSBST1RMKGEsIDUpICsgZihzLCBiLCBjLCBkKSArIGUgKyBLW3NdICsgV1tfdDJdID4+PiAwO1xuICAgICAgZSA9IGQ7XG4gICAgICBkID0gYztcbiAgICAgIGMgPSBST1RMKGIsIDMwKSA+Pj4gMDtcbiAgICAgIGIgPSBhO1xuICAgICAgYSA9IFQ7XG4gICAgfVxuXG4gICAgSFswXSA9IEhbMF0gKyBhID4+PiAwO1xuICAgIEhbMV0gPSBIWzFdICsgYiA+Pj4gMDtcbiAgICBIWzJdID0gSFsyXSArIGMgPj4+IDA7XG4gICAgSFszXSA9IEhbM10gKyBkID4+PiAwO1xuICAgIEhbNF0gPSBIWzRdICsgZSA+Pj4gMDtcbiAgfVxuXG4gIHJldHVybiBbSFswXSA+PiAyNCAmIDB4ZmYsIEhbMF0gPj4gMTYgJiAweGZmLCBIWzBdID4+IDggJiAweGZmLCBIWzBdICYgMHhmZiwgSFsxXSA+PiAyNCAmIDB4ZmYsIEhbMV0gPj4gMTYgJiAweGZmLCBIWzFdID4+IDggJiAweGZmLCBIWzFdICYgMHhmZiwgSFsyXSA+PiAyNCAmIDB4ZmYsIEhbMl0gPj4gMTYgJiAweGZmLCBIWzJdID4+IDggJiAweGZmLCBIWzJdICYgMHhmZiwgSFszXSA+PiAyNCAmIDB4ZmYsIEhbM10gPj4gMTYgJiAweGZmLCBIWzNdID4+IDggJiAweGZmLCBIWzNdICYgMHhmZiwgSFs0XSA+PiAyNCAmIDB4ZmYsIEhbNF0gPj4gMTYgJiAweGZmLCBIWzRdID4+IDggJiAweGZmLCBIWzRdICYgMHhmZl07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNoYTE7IiwiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgc2hhMSBmcm9tICcuL3NoYTEuanMnO1xudmFyIHY1ID0gdjM1KCd2NScsIDB4NTAsIHNoYTEpO1xuZXhwb3J0IGRlZmF1bHQgdjU7IiwiZXhwb3J0IGRlZmF1bHQgJzAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCc7IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG5mdW5jdGlvbiB2ZXJzaW9uKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cblxuICByZXR1cm4gcGFyc2VJbnQodXVpZC5zdWJzdHIoMTQsIDEpLCAxNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZlcnNpb247IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxuX193ZWJwYWNrX3JlcXVpcmVfXyg2MDcpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==