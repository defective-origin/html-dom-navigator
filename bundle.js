(()=>{"use strict";var e={569:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var a=o(r(996)),s=function(){function e(){this.elem=null,this.nodeMapByUuid={},this.nodeMapByLabel={},this.activeNode=null,this.rootNode=null}return e.prototype.parseHtml=function(e,t){for(var r=0;r<e.children.length;r+=1){var n=e.children[r];if(a.default.hasNavTypeAttribute(n)){var i=new a.default(n,t);this.registerNode(i),i.type!==a.NavNodeTypes.Item&&this.parseHtml(n,i)}else this.parseHtml(n,t)}},e.prototype.registerNode=function(e){this.nodeMapByUuid[e.uuid]=e,e.label&&(this.nodeMapByLabel[e.label]=e)},e.prototype.build=function(e){var t;if(a.default.hasNavTypeAttribute(e)){var r=null===(t=this.activeNode)||void 0===t?void 0:t.uuid;this.clear(),this.elem=e,this.rootNode=new a.default(e),this.parseHtml(this.elem,this.rootNode),this.nodeMapByUuid[r]?this.activateNodeByUuid(r):this.activateNode(this.rootNode)}},e.prototype.clear=function(){this.elem=null,this.rootNode=null,this.nodeMapByUuid={},this.nodeMapByLabel={},this.deactivateNode()},e.prototype.activateNodeByLabel=function(e){var t=this.nodeMapByLabel[e];this.activateNode(t)},e.prototype.activateNodeByUuid=function(e){var t=this.nodeMapByUuid[e];this.activateNode(t)},e.prototype.activateNode=function(e){var t;if(void 0===e&&(e=null),e&&e.uuid!==(null===(t=this.activeNode)||void 0===t?void 0:t.uuid))if(e.hasType(a.NavNodeTypes.Item))this.deactivateNode(),this.activeNode=e,e.activate();else{var r=e.getFirstChildNode();this.activateNode(r)}},e.prototype.deactivateNode=function(){var e;null===(e=this.activeNode)||void 0===e||e.deactivate(),this.activeNode=null},e.prototype.move=function(e,t,r){if(void 0===r&&(r=null),e&&e.parent){var n=e.parent,i=n.getChildNode(e.index+t);r&&!n.hasType(r)||!i?this.move(n,t,r):this.activateNode(i)}},e.prototype.next=function(){var e=this.activeNode;this.move(this.activeNode,a.Offset.Next),this.activeNode&&e&&e.uuid===this.activeNode.uuid&&this.activateNode(this.rootNode)},e.prototype.up=function(){this.move(this.activeNode,a.Offset.Prev,a.NavNodeTypes.Row)},e.prototype.down=function(){this.move(this.activeNode,a.Offset.Next,a.NavNodeTypes.Row)},e.prototype.left=function(){this.move(this.activeNode,a.Offset.Prev,a.NavNodeTypes.Column)},e.prototype.right=function(){this.move(this.activeNode,a.Offset.Next,a.NavNodeTypes.Column)},e}();t.default=s},996:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Offset=t.NavNodeDataAttrs=t.NavNodeTypes=void 0;var n,i,o,a=r(614);!function(e){e.Row="row",e.Column="column",e.Item="item"}(n=t.NavNodeTypes||(t.NavNodeTypes={})),function(e){e.NavType="nav",e.NavLabel="navLabel",e.NavUuid="navUuid",e.ActiveNavItem="activeNavItem"}(i=t.NavNodeDataAttrs||(t.NavNodeDataAttrs={})),(o=t.Offset||(t.Offset={}))[o.Next=1]="Next",o[o.Prev=-1]="Prev";var s=function(){function e(e,t){void 0===t&&(t=null),this.elem=e,this.parent=t,this.children=[],this.index=0,t&&(this.index=t.children.length,t.children.push(this)),this.hasType(n.Item)&&(this.elem.tabIndex=-1),this.elem.dataset[i.NavUuid]||(this.elem.dataset[i.NavUuid]=a.v4())}return Object.defineProperty(e.prototype,"type",{get:function(){return this.elem.dataset[i.NavType]||null},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"uuid",{get:function(){return this.elem.dataset[i.NavUuid]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.elem.dataset[i.NavLabel]||null},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isActive",{get:function(){return Boolean(this.elem.dataset[i.ActiveNavItem])},enumerable:!1,configurable:!0}),e.prototype.hasType=function(e){return this.type===e},e.prototype.getChildNode=function(e){return this.children[e]||null},e.prototype.getFirstChildNode=function(){return this.getChildNode(0)},e.hasNavTypeAttribute=function(e){return Boolean(e.dataset[i.NavType])},e.prototype.activate=function(){this.isActive||this.type!==n.Item||(this.elem.dataset[i.ActiveNavItem]="true",this.elem.focus(),this.elem.scrollIntoView({block:"center",inline:"center",behavior:"smooth"}))},e.prototype.deactivate=function(){this.isActive&&(this.elem.blur(),delete this.elem.dataset[i.ActiveNavItem])},e}();t.default=s},124:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(569)),o=n(r(105)),a=n(r(522)),s=n(r(876)),u=function(){function e(){this.navTree=new i.default,this.navTreeHtmlObserver=new o.default,this.navTreeClickObserver=new a.default,this.navTreeKeyPressObserver=new s.default}return e.prototype.subscribe=function(e){e.isEqualNode(this.navTree.elem)||(this.unsubscribe(),this.navTree.build(e),this.navTreeHtmlObserver.subscribe(this.navTree),this.navTreeClickObserver.subscribe(this.navTree),this.navTreeKeyPressObserver.subscribe(this.navTree))},e.prototype.activateNavNodeByLabel=function(e){this.navTree.activateNodeByLabel(e)},e.prototype.activateNavNodeByUuid=function(e){this.navTree.activateNodeByUuid(e)},e.prototype.deactivateNavNode=function(){this.navTree.deactivateNode()},e.prototype.unsubscribe=function(){this.navTree.clear(),this.navTreeHtmlObserver.unsubscribe(),this.navTreeClickObserver.unsubscribe(),this.navTreeKeyPressObserver.unsubscribe()},e}();t.default=u},607:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.NavTreeObservers=t.NavTreeNode=t.NavTree=void 0;var i=n(r(124)),o=n(r(569));t.NavTree=o.default;var a=n(r(996));t.NavTreeNode=a.default;var s=n(r(937));t.NavTreeObservers=s.default,"undefined"!=typeof window&&(window.HtmlDomNavigator=i.default),t.default=i.default},522:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(996);t.default=function(){var e=this;this.observable=null,this.subscribe=function(t){e.unsubscribe(),e.observable=t,window.onclick=e.onClickEventDetected},this.onClickEventDetected=function(t){var r=t.target.closest('[data-nav="'+n.NavNodeTypes.Item+'"]');r&&e.observable&&e.observable.activateNodeByUuid(r.dataset[n.NavNodeDataAttrs.NavUuid])},this.unsubscribe=function(){window.onclick=null,e.observable=null}}},105:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=this;this.observable=null,this.observerConfig={attributes:!0,childList:!0,subtree:!0,attributeFilter:["data-nav"]},this.subscribe=function(t){e.unsubscribe(),t.elem&&(e.observable=t,e.mutationObserver.observe(t.elem,e.observerConfig))},this.onHtmlChangeDetected=function(){var t;(null===(t=e.observable)||void 0===t?void 0:t.elem)?e.observable.build(e.observable.elem):e.unsubscribe()},this.unsubscribe=function(){e.mutationObserver.disconnect(),e.observable=null},this.mutationObserver=new MutationObserver(this.onHtmlChangeDetected)}},876:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){var e=this;this.controls={},this.subscribe=function(t){e.unsubscribe(),e.controls={ArrowUp:function(){return t.up()},ArrowDown:function(){return t.down()},ArrowLeft:function(){return t.left()},ArrowRight:function(){return t.right()},Tab:function(){return t.next()}},window.onkeydown=e.onKeyEventDetected},this.onKeyEventDetected=function(t){t.preventDefault();var r=e.controls[t.key];r&&r()},this.unsubscribe=function(){window.onkeydown=null}}},937:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(522)),o=n(r(105)),a=n(r(876));t.default={NavTreeClickObserver:i.default,NavTreeHtmlObserver:o.default,NavTreeKeyPressObserver:a.default}},614:(e,t,r)=>{r.r(t),r.d(t,{NIL:()=>P,parse:()=>b,stringify:()=>c,v1:()=>p,v3:()=>A,v4:()=>U,v5:()=>I,validate:()=>s,version:()=>j});var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),i=new Uint8Array(16);function o(){if(!n)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(i)}const a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,s=function(e){return"string"==typeof e&&a.test(e)};for(var u=[],l=0;l<256;++l)u.push((l+256).toString(16).substr(1));const c=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(u[e[t+0]]+u[e[t+1]]+u[e[t+2]]+u[e[t+3]]+"-"+u[e[t+4]]+u[e[t+5]]+"-"+u[e[t+6]]+u[e[t+7]]+"-"+u[e[t+8]]+u[e[t+9]]+"-"+u[e[t+10]]+u[e[t+11]]+u[e[t+12]]+u[e[t+13]]+u[e[t+14]]+u[e[t+15]]).toLowerCase();if(!s(r))throw TypeError("Stringified UUID is invalid");return r};var d,v,f=0,h=0;const p=function(e,t,r){var n=t&&r||0,i=t||new Array(16),a=(e=e||{}).node||d,s=void 0!==e.clockseq?e.clockseq:v;if(null==a||null==s){var u=e.random||(e.rng||o)();null==a&&(a=d=[1|u[0],u[1],u[2],u[3],u[4],u[5]]),null==s&&(s=v=16383&(u[6]<<8|u[7]))}var l=void 0!==e.msecs?e.msecs:Date.now(),p=void 0!==e.nsecs?e.nsecs:h+1,b=l-f+(p-h)/1e4;if(b<0&&void 0===e.clockseq&&(s=s+1&16383),(b<0||l>f)&&void 0===e.nsecs&&(p=0),p>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");f=l,h=p,v=s;var y=(1e4*(268435455&(l+=122192928e5))+p)%4294967296;i[n++]=y>>>24&255,i[n++]=y>>>16&255,i[n++]=y>>>8&255,i[n++]=255&y;var N=l/4294967296*1e4&268435455;i[n++]=N>>>8&255,i[n++]=255&N,i[n++]=N>>>24&15|16,i[n++]=N>>>16&255,i[n++]=s>>>8|128,i[n++]=255&s;for(var m=0;m<6;++m)i[n+m]=a[m];return t||c(i)},b=function(e){if(!s(e))throw TypeError("Invalid UUID");var t,r=new Uint8Array(16);return r[0]=(t=parseInt(e.slice(0,8),16))>>>24,r[1]=t>>>16&255,r[2]=t>>>8&255,r[3]=255&t,r[4]=(t=parseInt(e.slice(9,13),16))>>>8,r[5]=255&t,r[6]=(t=parseInt(e.slice(14,18),16))>>>8,r[7]=255&t,r[8]=(t=parseInt(e.slice(19,23),16))>>>8,r[9]=255&t,r[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,r[11]=t/4294967296&255,r[12]=t>>>24&255,r[13]=t>>>16&255,r[14]=t>>>8&255,r[15]=255&t,r};function y(e,t,r){function n(e,n,i,o){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],r=0;r<e.length;++r)t.push(e.charCodeAt(r));return t}(e)),"string"==typeof n&&(n=b(n)),16!==n.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var a=new Uint8Array(16+e.length);if(a.set(n),a.set(e,n.length),(a=r(a))[6]=15&a[6]|t,a[8]=63&a[8]|128,i){o=o||0;for(var s=0;s<16;++s)i[o+s]=a[s];return i}return c(a)}try{n.name=e}catch(e){}return n.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",n.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",n}function N(e){return 14+(e+64>>>9<<4)+1}function m(e,t){var r=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(r>>16)<<16|65535&r}function g(e,t,r,n,i,o){return m((a=m(m(t,e),m(n,o)))<<(s=i)|a>>>32-s,r);var a,s}function w(e,t,r,n,i,o,a){return g(t&r|~t&n,e,t,i,o,a)}function T(e,t,r,n,i,o,a){return g(t&n|r&~n,e,t,i,o,a)}function O(e,t,r,n,i,o,a){return g(t^r^n,e,t,i,o,a)}function _(e,t,r,n,i,o,a){return g(r^(t|~n),e,t,i,o,a)}const A=y("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(var r=0;r<t.length;++r)e[r]=t.charCodeAt(r)}return function(e){for(var t=[],r=32*e.length,n="0123456789abcdef",i=0;i<r;i+=8){var o=e[i>>5]>>>i%32&255,a=parseInt(n.charAt(o>>>4&15)+n.charAt(15&o),16);t.push(a)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[N(t)-1]=t;for(var r=1732584193,n=-271733879,i=-1732584194,o=271733878,a=0;a<e.length;a+=16){var s=r,u=n,l=i,c=o;r=w(r,n,i,o,e[a],7,-680876936),o=w(o,r,n,i,e[a+1],12,-389564586),i=w(i,o,r,n,e[a+2],17,606105819),n=w(n,i,o,r,e[a+3],22,-1044525330),r=w(r,n,i,o,e[a+4],7,-176418897),o=w(o,r,n,i,e[a+5],12,1200080426),i=w(i,o,r,n,e[a+6],17,-1473231341),n=w(n,i,o,r,e[a+7],22,-45705983),r=w(r,n,i,o,e[a+8],7,1770035416),o=w(o,r,n,i,e[a+9],12,-1958414417),i=w(i,o,r,n,e[a+10],17,-42063),n=w(n,i,o,r,e[a+11],22,-1990404162),r=w(r,n,i,o,e[a+12],7,1804603682),o=w(o,r,n,i,e[a+13],12,-40341101),i=w(i,o,r,n,e[a+14],17,-1502002290),r=T(r,n=w(n,i,o,r,e[a+15],22,1236535329),i,o,e[a+1],5,-165796510),o=T(o,r,n,i,e[a+6],9,-1069501632),i=T(i,o,r,n,e[a+11],14,643717713),n=T(n,i,o,r,e[a],20,-373897302),r=T(r,n,i,o,e[a+5],5,-701558691),o=T(o,r,n,i,e[a+10],9,38016083),i=T(i,o,r,n,e[a+15],14,-660478335),n=T(n,i,o,r,e[a+4],20,-405537848),r=T(r,n,i,o,e[a+9],5,568446438),o=T(o,r,n,i,e[a+14],9,-1019803690),i=T(i,o,r,n,e[a+3],14,-187363961),n=T(n,i,o,r,e[a+8],20,1163531501),r=T(r,n,i,o,e[a+13],5,-1444681467),o=T(o,r,n,i,e[a+2],9,-51403784),i=T(i,o,r,n,e[a+7],14,1735328473),r=O(r,n=T(n,i,o,r,e[a+12],20,-1926607734),i,o,e[a+5],4,-378558),o=O(o,r,n,i,e[a+8],11,-2022574463),i=O(i,o,r,n,e[a+11],16,1839030562),n=O(n,i,o,r,e[a+14],23,-35309556),r=O(r,n,i,o,e[a+1],4,-1530992060),o=O(o,r,n,i,e[a+4],11,1272893353),i=O(i,o,r,n,e[a+7],16,-155497632),n=O(n,i,o,r,e[a+10],23,-1094730640),r=O(r,n,i,o,e[a+13],4,681279174),o=O(o,r,n,i,e[a],11,-358537222),i=O(i,o,r,n,e[a+3],16,-722521979),n=O(n,i,o,r,e[a+6],23,76029189),r=O(r,n,i,o,e[a+9],4,-640364487),o=O(o,r,n,i,e[a+12],11,-421815835),i=O(i,o,r,n,e[a+15],16,530742520),r=_(r,n=O(n,i,o,r,e[a+2],23,-995338651),i,o,e[a],6,-198630844),o=_(o,r,n,i,e[a+7],10,1126891415),i=_(i,o,r,n,e[a+14],15,-1416354905),n=_(n,i,o,r,e[a+5],21,-57434055),r=_(r,n,i,o,e[a+12],6,1700485571),o=_(o,r,n,i,e[a+3],10,-1894986606),i=_(i,o,r,n,e[a+10],15,-1051523),n=_(n,i,o,r,e[a+1],21,-2054922799),r=_(r,n,i,o,e[a+8],6,1873313359),o=_(o,r,n,i,e[a+15],10,-30611744),i=_(i,o,r,n,e[a+6],15,-1560198380),n=_(n,i,o,r,e[a+13],21,1309151649),r=_(r,n,i,o,e[a+4],6,-145523070),o=_(o,r,n,i,e[a+11],10,-1120210379),i=_(i,o,r,n,e[a+2],15,718787259),n=_(n,i,o,r,e[a+9],21,-343485551),r=m(r,s),n=m(n,u),i=m(i,l),o=m(o,c)}return[r,n,i,o]}(function(e){if(0===e.length)return[];for(var t=8*e.length,r=new Uint32Array(N(t)),n=0;n<t;n+=8)r[n>>5]|=(255&e[n/8])<<n%32;return r}(e),8*e.length))})),U=function(e,t,r){var n=(e=e||{}).random||(e.rng||o)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){r=r||0;for(var i=0;i<16;++i)t[r+i]=n[i];return t}return c(n)};function C(e,t,r,n){switch(e){case 0:return t&r^~t&n;case 1:return t^r^n;case 2:return t&r^t&n^r&n;case 3:return t^r^n}}function M(e,t){return e<<t|e>>>32-t}const I=y("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var n=unescape(encodeURIComponent(e));e=[];for(var i=0;i<n.length;++i)e.push(n.charCodeAt(i))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var o=e.length/4+2,a=Math.ceil(o/16),s=new Array(a),u=0;u<a;++u){for(var l=new Uint32Array(16),c=0;c<16;++c)l[c]=e[64*u+4*c]<<24|e[64*u+4*c+1]<<16|e[64*u+4*c+2]<<8|e[64*u+4*c+3];s[u]=l}s[a-1][14]=8*(e.length-1)/Math.pow(2,32),s[a-1][14]=Math.floor(s[a-1][14]),s[a-1][15]=8*(e.length-1)&4294967295;for(var d=0;d<a;++d){for(var v=new Uint32Array(80),f=0;f<16;++f)v[f]=s[d][f];for(var h=16;h<80;++h)v[h]=M(v[h-3]^v[h-8]^v[h-14]^v[h-16],1);for(var p=r[0],b=r[1],y=r[2],N=r[3],m=r[4],g=0;g<80;++g){var w=Math.floor(g/20),T=M(p,5)+C(w,b,y,N)+m+t[w]+v[g]>>>0;m=N,N=y,y=M(b,30)>>>0,b=p,p=T}r[0]=r[0]+p>>>0,r[1]=r[1]+b>>>0,r[2]=r[2]+y>>>0,r[3]=r[3]+N>>>0,r[4]=r[4]+m>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]})),P="00000000-0000-0000-0000-000000000000",j=function(e){if(!s(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}}},t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,